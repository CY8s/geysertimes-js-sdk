{"version":3,"sources":["../../src/index.js"],"names":["Client","constructor","config","baseURL","getGeysers","args","forceRefresh","data","geysers","getPredictions","userIDs","predictions","pathSegment","request","fetch","json"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA,MAAMA,MAAN,CAAa;AAIX;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAc;AAAA;;AAAA;AAAA;AAAA,aARd;AAQc;;AAAA;AAAA;AAAA,aAPd;AAOc;;AACvB,UAAM;AAAEC,MAAAA,OAAO,GAAG;AAAZ,QAAqDD,MAA3D;;AACA,0CAAgBC,OAAhB;AACD;;AAQD;AACF;AACA;AACA;AACA;AACA;AACQC,EAAAA,UAAU,CAACC,IAAI,GAAG,EAAR,EAAY;AAAA;;AAAA;AAC1B,YAAM;AAAEC,QAAAA,YAAY,GAAG;AAAjB,UAA2BD,IAAjC;;AAEA,UAAIC,YAAY,IAAI,uBAAC,KAAD,WAApB,EAAoC;AAClC,cAAMC,IAAI,gCAAS,KAAT,4BAAS,KAAT,EAAuB,SAAvB,CAAV;;AACA,8BAAA,KAAI,YAAYA,IAAI,CAACC,OAAL,IAAgB,IAA5B,CAAJ;AACD;;AACD,mCAAO,KAAP;AAP0B;AAQ3B;AAED;AACF;AACA;AACA;AACA;AACA;;;AACQC,EAAAA,cAAc,CAACJ,IAAI,GAAG,EAAR,EAAY;AAAA;;AAAA;AAC9B,YAAM;AAAEK,QAAAA,OAAO,GAAG;AAAZ,UAAyBL,IAA/B;AACA,YAAME,IAAI,gCAAS,MAAT,4BAAS,MAAT,EAAwB,6BAA4BG,OAAQ,EAA5D,CAAV;AACA,aAAOH,IAAI,CAACI,WAAZ;AAH8B;AAI/B;;AA9CU;;;;;;;2CAcIC,W,EAAa;AAC1B,UAAMC,OAAO,SAASC,KAAK,CAAE,GAAD,sBAAG,IAAH,WAAiB,IAAGF,WAAY,EAAjC,CAA3B;AACA,UAAML,IAAI,SAASM,OAAO,CAACE,IAAR,EAAnB;AACA,WAAOR,IAAP;AACD,G;;;;eA+BYP,M","sourcesContent":["import \"isomorphic-fetch\";\n\n/**\n *\n */\nclass Client {\n  #baseURL = null;\n  #geysers = null;\n\n  /**\n   * Constructor that creates a GeyserTimes API Client\n   *\n   * @param {string} config.baseURL - Base URL for Geysertimes API\n   */\n  constructor(config = {}) {\n    const { baseURL = \"https://www.geysertimes.org/api/v5\" } = config;\n    this.#baseURL = baseURL;\n  }\n\n  async #getData(pathSegment) {\n    const request = await fetch(`${this.#baseURL}/${pathSegment}`);\n    const data = await request.json();\n    return data;\n  }\n\n  /**\n   *\n   * @param {Object} args - Get Geyser Arguments\n   * @param {boolean} args.forceRefresh - Force refresh of geyser list\n   * @returns {Object[]} Array of Objects containing geyser data.\n   */\n  async getGeysers(args = {}) {\n    const { forceRefresh = false } = args;\n\n    if (forceRefresh || !this.#geysers) {\n      const data = await this.#getData(\"geysers\");\n      this.#geysers = data.geysers || null;\n    }\n    return this.#geysers;\n  }\n\n  /**\n   *\n   * @param {Object} args - Get Prediction Arguments\n   * @param {string} args.userIDs - Comma-delimited list of userIDs for prediction sources\n   * @returns {Object[]} Array of Objects containing geyser data.\n   */\n  async getPredictions(args = {}) {\n    const { userIDs = \"44,208\" } = args;\n    const data = await this.#getData(`predictions_latest?userID=${userIDs}`);\n    return data.predictions;\n  }\n}\n\nexport default Client;\n"],"file":"index.js"}